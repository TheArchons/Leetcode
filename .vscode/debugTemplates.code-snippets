{
	// Place your Leetcode workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"2LinkedListsDebug": {
		"prefix": "twoLinkedListsDebug",
		"body": [
		  "# Definition for singly-linked list.",
		  "class ListNode:",
		  "    def __init__(self, val=0, next=None):",
		  "        self.val = val",
		  "        self.next = next",
		  "",
		  "#put leetcode code here",
		  "${1}",
		  "",
		  "list1 = input().strip('[]').split(',')",
		  "list2 = input().strip('[]').split(',')",
		  "l1 = ListNode(int(list1[0]))",
		  "l2 = ListNode(int(list2[0]))",
		  "",
		  "for i in range(1,len(list1)):",
		  "    head = l1",
		  "    while head.next != None:",
		  "        head = head.next",
		  "    head.next = ListNode(int(list1[i]))",
		  "    head = head.next",
		  "",
		  "for i in range(1, len(list2)):",
		  "    head = l2",
		  "    while head.next != None:",
		  "        head = head.next",
		  "    head.next = ListNode(int(list2[i]))",
		  "    head = head.next",
		  "",
		  "returned = Solution().${0}(Solution, l1, l2)",
		  "",
		  "while returned != None:",
		  "    print(returned.val)",
		  "    returned = returned.next"
		],
		"description": ""
	  },
	  "linkedListDebug": {
		"prefix": "linkedListDebug",
		"body": [
		  "# Definition for singly-linked list.",
		  "class ListNode:",
		  "    def __init__(self, val=0, next=None):",
		  "        self.val = val",
		  "        self.next = next",
		  "",
		  "#put leetcode code here",
		  "$1",
		  "",
		  "#debug code",
		  "list1 = input().strip('[]').split(',')",
		  "list1 = [int(i) for i in list1]",
		  "",
		  "l1 = ListNode(list1[0])",
		  "head = l1",
		  "for i in range(1,len(list1)):",
		  "    head.next = ListNode(list1[i])",
		  "    head = head.next",
		  "",
		  "result = Solution.$0(Solution, l1)",
		  "",
		  "#print result",
		  "while result != None:",
		  "    print(result.val)",
		  "    result = result.next"
		],
		"description": ""
	  }
}